#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReportMonthResultGenerator
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Voiting")]
	public partial class VoitingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertQuestAnswer(QuestAnswer instance);
    partial void UpdateQuestAnswer(QuestAnswer instance);
    partial void DeleteQuestAnswer(QuestAnswer instance);
    partial void InsertQuestQuestion(QuestQuestion instance);
    partial void UpdateQuestQuestion(QuestQuestion instance);
    partial void DeleteQuestQuestion(QuestQuestion instance);
    #endregion
		
		public VoitingDataContext() : 
				base(global::ReportMonthResultGenerator.Properties.Settings.Default.VoitingConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VoitingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VoitingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VoitingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VoitingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<QuestAnswer> QuestAnswers
		{
			get
			{
				return this.GetTable<QuestAnswer>();
			}
		}
		
		public System.Data.Linq.Table<QuestQuestion> QuestQuestions
		{
			get
			{
				return this.GetTable<QuestQuestion>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestAnswers")]
	public partial class QuestAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _AnketaId;
		
		private System.Nullable<int> _QuestionId;
		
		private System.Nullable<int> _EmpId;
		
		private System.Nullable<int> _EmpDepNum;
		
		private System.Nullable<int> _EmpDepPos;
		
		private System.Nullable<System.DateTime> _AnswerDate;
		
		private System.Nullable<int> _Result;
		
		private string _Ip;
		
		private string _CompName;
		
		private EntityRef<QuestQuestion> _QuestQuestion;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAnketaIdChanging(System.Nullable<int> value);
    partial void OnAnketaIdChanged();
    partial void OnQuestionIdChanging(System.Nullable<int> value);
    partial void OnQuestionIdChanged();
    partial void OnEmpIdChanging(System.Nullable<int> value);
    partial void OnEmpIdChanged();
    partial void OnEmpDepNumChanging(System.Nullable<int> value);
    partial void OnEmpDepNumChanged();
    partial void OnEmpDepPosChanging(System.Nullable<int> value);
    partial void OnEmpDepPosChanged();
    partial void OnAnswerDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAnswerDateChanged();
    partial void OnResultChanging(System.Nullable<int> value);
    partial void OnResultChanged();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    partial void OnCompNameChanging(string value);
    partial void OnCompNameChanged();
    #endregion
		
		public QuestAnswer()
		{
			this._QuestQuestion = default(EntityRef<QuestQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnketaId", DbType="Int")]
		public System.Nullable<int> AnketaId
		{
			get
			{
				return this._AnketaId;
			}
			set
			{
				if ((this._AnketaId != value))
				{
					this.OnAnketaIdChanging(value);
					this.SendPropertyChanging();
					this._AnketaId = value;
					this.SendPropertyChanged("AnketaId");
					this.OnAnketaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int")]
		public System.Nullable<int> QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._QuestQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpId", DbType="Int")]
		public System.Nullable<int> EmpId
		{
			get
			{
				return this._EmpId;
			}
			set
			{
				if ((this._EmpId != value))
				{
					this.OnEmpIdChanging(value);
					this.SendPropertyChanging();
					this._EmpId = value;
					this.SendPropertyChanged("EmpId");
					this.OnEmpIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpDepNum", DbType="Int")]
		public System.Nullable<int> EmpDepNum
		{
			get
			{
				return this._EmpDepNum;
			}
			set
			{
				if ((this._EmpDepNum != value))
				{
					this.OnEmpDepNumChanging(value);
					this.SendPropertyChanging();
					this._EmpDepNum = value;
					this.SendPropertyChanged("EmpDepNum");
					this.OnEmpDepNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpDepPos", DbType="Int")]
		public System.Nullable<int> EmpDepPos
		{
			get
			{
				return this._EmpDepPos;
			}
			set
			{
				if ((this._EmpDepPos != value))
				{
					this.OnEmpDepPosChanging(value);
					this.SendPropertyChanging();
					this._EmpDepPos = value;
					this.SendPropertyChanged("EmpDepPos");
					this.OnEmpDepPosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AnswerDate
		{
			get
			{
				return this._AnswerDate;
			}
			set
			{
				if ((this._AnswerDate != value))
				{
					this.OnAnswerDateChanging(value);
					this.SendPropertyChanging();
					this._AnswerDate = value;
					this.SendPropertyChanged("AnswerDate");
					this.OnAnswerDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="Int")]
		public System.Nullable<int> Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="NVarChar(50)")]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompName", DbType="NChar(255)")]
		public string CompName
		{
			get
			{
				return this._CompName;
			}
			set
			{
				if ((this._CompName != value))
				{
					this.OnCompNameChanging(value);
					this.SendPropertyChanging();
					this._CompName = value;
					this.SendPropertyChanged("CompName");
					this.OnCompNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestQuestion_QuestAnswer", Storage="_QuestQuestion", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true)]
		public QuestQuestion QuestQuestion
		{
			get
			{
				return this._QuestQuestion.Entity;
			}
			set
			{
				QuestQuestion previousValue = this._QuestQuestion.Entity;
				if (((previousValue != value) 
							|| (this._QuestQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestQuestion.Entity = null;
						previousValue.QuestAnswers.Remove(this);
					}
					this._QuestQuestion.Entity = value;
					if ((value != null))
					{
						value.QuestAnswers.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestQuestions")]
	public partial class QuestQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _AnketaId;
		
		private string _Text;
		
		private EntitySet<QuestAnswer> _QuestAnswers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAnketaIdChanging(System.Nullable<int> value);
    partial void OnAnketaIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public QuestQuestion()
		{
			this._QuestAnswers = new EntitySet<QuestAnswer>(new Action<QuestAnswer>(this.attach_QuestAnswers), new Action<QuestAnswer>(this.detach_QuestAnswers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnketaId", DbType="Int")]
		public System.Nullable<int> AnketaId
		{
			get
			{
				return this._AnketaId;
			}
			set
			{
				if ((this._AnketaId != value))
				{
					this.OnAnketaIdChanging(value);
					this.SendPropertyChanging();
					this._AnketaId = value;
					this.SendPropertyChanged("AnketaId");
					this.OnAnketaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(500)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestQuestion_QuestAnswer", Storage="_QuestAnswers", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<QuestAnswer> QuestAnswers
		{
			get
			{
				return this._QuestAnswers;
			}
			set
			{
				this._QuestAnswers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuestAnswers(QuestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.QuestQuestion = this;
		}
		
		private void detach_QuestAnswers(QuestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.QuestQuestion = null;
		}
	}
}
#pragma warning restore 1591
